JS笔记:
    基础语法: 类似于JAVA语法
    数据类型:    Number 数字
                    整型、浮点型、NaN (Not a Number) 、 Infinity (无穷大)
                    科学计数法同样可用 (eg. 1.2e3 == 1200 )
                String 字符串
                    可利用 '\' 进行转义
                    字符串类型不允许断行   
                    但可以利用 ' ` ' 标在文段前后使编译器理解
                boolea 布尔值
                    true false
                Array 数组    []
                Object 对象   {}  对象内用'，'分隔不同内容
                可利用 typeof() 方法对变量类型进行查询
    变量:   var (variable) 
    控制流:  if & else 语句    0 和 '' (空字符串)  会被认为 false 
            switch 语句
    运算符: + - * /  = += -= *= /= ++ -- > < >= <= == === != && || !
    循环:   for 语句
            while 语句
    函数:   格式:  function name(){}    匿名函数  ;( function(){} )();
    闭包: eg.    function user(name) {
                    var age, sex;
                    return {
                        getName: function(){
                            return name;
                        },
                        setName: function(newName){
                            name=newName;
                        },
                        getAge: function(){
                            return age;
                        },
                        setAge: function(newAge){
                            age=newAge;
                        },
                        getSex: function(){
                            return sex;
                        },
                        setSex: function(newSex){
                            sex=newSex;
                        }
                    }
                }
    Window对象: (BOM 内容)
                用于提示的方法:(弹窗)
                    alert() 提示用户某项信息   仅有 OK 选项
                    confirm()  确认某件事情   有 OK  与  Cancel  两个选项
                        并将选项结果反馈回系统   返回结果为 boolean 类型
                    prompt()  弹出一个输入框 让用户输入信息   并将输入内容返回系统
                关于时间的方法（计时器）:
                    setTimeout( 函数名, 时间 )   在经过一定时间后执行函数内容 时间单位为 毫秒(ms) (单次执行)
                    setInterval( 函数名, 时间 )   每经过一定时间执行一次函数内容  时间单位 毫秒(ms) (循环执行)
                    clearInterval(清除计时器名称)    清楚某一计时器 使其停止作用
                        eg. var timer = setInterval ( function(){
                                console.log ('Yo.');
                            }, 1000 );
                            clearInterval( timer );
                        该示例 即为取消 作用为 每秒打印一行 'Yo.' 的计时器                
                浏览器导航栏: window.location 对象   可以查看导航栏的各种信息
                    eg. location.reload()  刷新该界面
                        location.replace("网址")   打开新的链接
                浏览器历史栏: window.history 对象
                    eg. history.back() 后退、返回上一个界面
                        history.forward()  前进、返回下一个界面
                        history.go(数字)  数字代表前进或后退次数之后的界面  -1 代表后退一个界面  1代表前进一个界面 
                浏览器信息栏: window.navigator 对象  可以查看信息栏的各种信息(版本、厂家等)
                浏览器分辨率  window.sceen  对象   可以获取浏览器的分辨率
    this-call,apply,bind
        call(),apply(): 绑定函数里的this 并直接执行之前的function
        bind(): 重新定义一个function 并指定function的执行环境
            eg. function yo(name){
                    console.log('Yo '+name+',我是'+this.name);
                }
                var whh={
                    name: '王花花'
                }
                yo.call(whh,'李栓蛋');
                yo.apply(whh,['李栓蛋']);
                yo2 = yo.bind(whh);
                yo2('李栓蛋');
                结果打印:   Yo 李栓蛋,我是王花花
            区别：传参方式不同    call() 直接根据函数形参的顺序进行传参
                                apply() 需要用数组形式再根据函数形参顺序进行传参
                                bind() 将绑定的新环境返回，再去调用
    DOM(Document Object Model 文档对象模型)
            3种常用的节点查找方法:
                1.通过ID来查找(ID具有唯一性)
                    var id = document.getElementById("Id名字")   
                2.通过标签名字来查找(返回一个数组)
                    var tagName = document.getElementsByTagName("标签名字")  
                        (tagName是一个数组，因此可对tagName进行数组操作)
                3.通过class来查找
                    var className = document.getElementsByClassName("class名字")
                        (className也是一个数组，可对className进行数组操作)
            创建、添加、删除节点:
                创建一个节点:
                    eg. 创建一个p标签节点   var p = document.createElement("p");
                        创建一个文本节点    var ptxt = document.createTextNode("p1")   p1 为文本内容
                添加一个节点:
                    eg. var div1 = document.getElementById("div1");   div1 为已有的一个ID
                        div1.appendChild(p);   将新创建的p标签添加到名为 div1 的Id节点内   
                删除一个节点:
                    通过父节点删除子节点  var div2 = document.getElementById("div2");
                                        div1.removeChild(div2);   删除 ID 为 div1 的节点的  ID 为 div2 子节点
                    直接删除自己节点    div2.parentNode.removeChild(div2);
            修改节点属性和内容:
                对于属性的修改:
                    获取属性: getAttribute("属性名");
                    修改、添加属性: setAttribute("属性名","属性值");
                    删除属性: removeAttribute("属性名");
                对于文本内容的修改:
                    var p1 = document.getElementById("p1");
                    对纯文本内容的修改: p1.textContent = "修改后的文本内容";
                    对带HTML标签的文本内容的修改: p1.innerHTML = "这是innerHTML <a href = ''></a>"; a标签将会生效
                    